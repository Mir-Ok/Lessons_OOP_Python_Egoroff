""" Паттерн моносостояния, или как сделать так,
    чтобы у всех объектов класса было одинаковое состояние

    Изначально у каласса есть атрибут и он передается всем его объектам при инициализации.

    Мы можем менять атрибут экземпляра класса или добавлять его, но на атрибуты класса это никак не влияет.
    Если мы создадим 2 объекта и поменяем их атрибуты, а потом создадим третий, то этот третий унаследует только то,
    что есть в атрибутах класса.

    Как сделать так, чтобы изменения атрибутов экземпляра класса влияло на все остальные объекты класса и их атрибуты?

    Логика такая: все атрибуты экземпляров класса хранятся в словаре __dict__ и если мы
    создадим метод, подменяющий его на нужный нам при инициализации, то атрибуты всех объектов свяжутся между собой.
    Потому что слварь - это изменяемый объект, и если через один объект мы параметр измним, то и для другх он изменится

    """

class Cat:

    __shared_attr = {
        'breed' : 'pers',
        'color' : 'black'
    }

    # подменяем словарь созданного объекта на заготовленный нами
    def __init__(self):
        self.__dict__ = Cat.__shared_attr

