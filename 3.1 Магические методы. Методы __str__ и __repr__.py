''' Магический метод начинается и зананчивается __
    Второе название dunder-method (двойное подчеркивание дважды)

    Они берут на себя функционал и вызываются автоматически в определенные моменты работы класса
    Не подлежат переименованию!

    Например, __init__ вызывается при создании и отвечает за инициализацию класса. Он
    принимает, как правило, в себя аргументы и сохраняет их в экземпляр атрибутом

    __perp__ отвечает за то, как класс будет отображаться внутри системы, как его будут видеть разработчки

    __str__ отвечает за то, как объект будет отображен при обработке функциями str() или print()? как его увидят
    пользователи '''

# создадим класс без этих методов
class Lion:

    def __init__(self, name):
        self.name = name


b = Lion('Bob')  # --> создалось системное имя <__main__.Lion object at 0x0000021102746DF0> сложное для восприятия
print(b)  # --> <__main__.Lion object at 0x0000021102746DF0>
str(b)    # --> <__main__.Lion object at 0x0000021102746DF0>


# создадим класс c методом __repr__
class Lion2:

    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return f'The oblect Lion = {self.name}'

b = Lion2('Bob')
b  # --> прямое обращение в консоли --> The oblect Lion = Bob стало гораздо понятнее
print(b)  # --> <__main__.Lion object at 0x0000021102746DF0>
str(b)    # --> <__main__.Lion object at 0x0000021102746DF0>


# создадим класс c методами __repr__ и __str__
class Lion3:

    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return f'The oblect Lion = {self.name}'

    def __str__(self):
        return f'The Lion = {self.name}'

b = Lion3('Bob')
b  # --> прямое обращение в консоли --> The oblect Lion = Bob стало гораздо понятнее
print(b)  # --> The Lion = Bob
str(b)    # --> The Lion = Bob

''' Если метод __str__ не определен, то автоматически при выводе и в консоли 
    будет подхватываться название из метода __repr__ 
    
    Если не определен метод __pepr__, то при вызове объекта напрямую в консоли
    не будет изменнеий, а если вызовем через print(), то и в консоли изменится '''