''' Важно! Если мы поставим конструкцию для обработки одного типа исключений,
    а программа выдаст другой тип - будет ошибка '''

''' Способ один - задать название исключения напрямую 
    Причем except может быть определен несколько раз '''

try:
    int('rrr')
    1/0
except ZeroDivisionError:
    print(' zerodivision ')
except ValueError:
    print(' valueerr')

# --> valueerr выдает то исключение, что нашла первой и дальше не идет

''' Еще один способ с учетом вложенности классов ошибок
    Поставить LookupError и тем самым ловить все IndexError
    Но проблема в том, что и ошибки ключей словарей тоже попадут сюда за компанию
    Это может помешать исправлению ошибок, запутает 
    
    Питон ищет от частного к общему, и если в старшем классе, ближнему к базе он
    найдет исключение, внутрь заходить и уточнять он не будет
    
    Можно без конкретики указать вообще весь общий класс исключений BaseException 
    Но это плохо для понимания сути ошибки и отладки
    Максимум, можно взять Exception? и в него не попадут системные ошибки '''

try:
    1/2
except ZeroDivisionError:
    print(' zerodivision ')
finally:
    print('end')  # срабатывает всегда, независимо от наличия ошибок
                  # хорошо для работы с файлом, допустим, закрытие в любом случае

# Причем можно и без except

try:
    1/2
finally:
    print('end')

''' Так же мы можем использовать конструкцию try - else 
    То есть определить что будет, если ошибки не будет '''

# случай, когда есть ошибка - то ее обработка и finally
try:
    1/0
except ZeroDivisionError:
    print(' zero div ')
else:
    print('good')
finally:
    print('end')
'''  zero div 
     end 
     '''

# случай, когда нет ошибки - то else и finally
try:
    1/1
except ZeroDivisionError:
    print(' zero div ')
else:
    print('good')
finally:
    print('end')
'''  good
     end
     '''

''' Каждому исключению можно дать псевдоним? она станет переменной, 
    которую можно использовать, например в дебаге '''

try:
    1/1
except ZeroDivisionError as err:
    print(' zero div ')
else:
    print('good')
finally:
    print('end')