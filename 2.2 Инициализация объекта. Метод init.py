# Если у класса есть метод, например:

class Cat():
    breed = 'pers'

    def set_value(self, value, age=5):
        self.name = value
        self.age = age


# ... то мы можем создать экземпляр класса и дополнить его описание этим методом

vov = Cat()
vov.set_value('vov', 8)

print(vov.name)  # --> vov

''' Что такое магические методы? 
    Они срабатывают сами в определенный момент времени. 
    Например, __init__ срабатывает сразу после создания объекта, заполняет его какими-либо значениями 
    
    Если раньше мы сначала создавали объект класса, и потом вызывали отдельно метод для заполнения
    его атрибутов, то теперь у  нас при создании объекта автоматически запускается метод, 
    который все заполняет. Либо значениями по умолчанию, либо нашими новыми, указанными при создании.
    
    Синтаксим магического метода: __ ... __
    
    
    '''
# Метод принимает внутрь сам созданный экземпляр

class Cat():
    breed = 'pers'

    def set_value(self, value, age=5):
        self.name = value
        self.age = age

    def __init__(self):  # вызывается после создания объекта, когда его пространство имен уже существует
        print('hello new object is ', self)

tom = Cat()  # --> hello, так как сразу после создания сработал метод __init__

# Посмотрим его пространство имен

print(tom.__dict__)  # --> {} пустое

''' Заполним аргументы для наших экземпляров, чтобы они создавались в момент инициализации.
    Причем как со значениЯми по умолчанию, так и с возможностью их указания '''

class Cat():

    # breed = 'pers' убираем, так как перенесли ниже
    def set_value(self, value, age=5):
        self.name = value
        self.age = age

    def __init__(self, name, breed='pers', age=1, color='white'):
        print('hello new object is ', self, name, breed, age, color)


''' Улучшим записы выше и проинициализируем атрибуты, которые будут хранить в себе эти значения 
    То есть поставим в соответсвие входящие аргументы и имена атрибутов, совпадение имен не обязательно

    '''

class Cat():

    # breed = 'pers' убираем, так как перенесли ниже
    def set_value(self, value, age=5):
        self.name = value
        self.age = age

    def __init__(self, name, breed='pers', age=1, color='white'):
        print('hello new object is ', self)
        self.name = name
        self.age = age
        self.breed = breed
        self.color = color


Walt = Cat('Walt')  # --> создается экземпляр с 4 сразу атрибутами, причем 1 только обязательный


''' 

def test ():
    print('test')

print( test() )

Когда вы вызываете строку print( test() ) происходит следующая последовательность действий:

1. print вызывает ваша процедура test().
2. Процедура test печатает вашу надпись 'test'
3. Процедура test() не возвращает результата( нет инструкции return). По этому результатом работы этой процедуры будет None. Это значение и печатает команда print.

Для того, чтобы получить ожидаемый результат ваш код следует изменить например так:

def test ():
    print('test')

test()

'''