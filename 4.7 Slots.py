''' Тема слотов относится только к классам.
    В чем может быть проблема?
    При создании объекта класса мы задаем ему атрибуты и дальше имеем возможность их дополнять.

    А если мы хотим сделать так, чтобы они не могли добавляться? Иначе сторонний пользователь может
    насоздавать атрибуты и методы в неограниченном количестве '''


class Point:

    def __init__(self, x, y):
        self.x = x
        self.y = y

p1 = Point(2,3)

print(p1.x)
p1.x = 8
p1.z = 150

# удостоверимся, что изменение и добавление прошло успешно
print(p1.__dict__)  # {'x': 8, 'y': 3, 'z': 150}

class PointSlots:

    __slots__ = ('x', 'y')

    def __init__(self, x, y):
        self.x = x
        self.y = y

ps1 = PointSlots(6,3)
print(ps1.x)
ps1.x = 5  # изменение знаения имеющегося атрибута допустимо, и удалять атрибут тоже можно
# ps1.z = 150  # AttributeError: 'PointSlots' object has no attribute 'z' - не дает создать или изменить

# посмотрим на словарь экземпляра
# print(ps1.__dict__)  # для слотированного класса нет словаря
                     # AttributeError: 'PointSlots' object has no attribute '__dict__'

''' То есть мы в слотированном классе можем изменять и удалять аттрибуты, а так же 
    восстанавливать удаленные с новыми значениями.
    Но все манипуляции только с именами атрибутов из списка __slots__
    Добавить от себя возможности нет
    Все атрибуты экземпляра хранятся НЕ в словаре __dict__ как обычно, а ... 
    
    Второе, объекты занимают меньше места в памяти. Потому то объекты без слотирования имеют словарь,
    который занимает дополнительное место
     
    Экземпляры слотированных классов создаются на 30% быстрее 
    
    Резюме: защита от дураков, быстрее, меньше места занимает '''




