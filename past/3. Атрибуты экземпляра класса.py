class Car:  # все атрибуты класса доступны через экземпляры
    model = 'BMW'
    engine = 1.6

a1 = Car()
a2 = Car()

    '''
    Car.__dict__ - посмотрим атрибуты класса
    
    mappingproxy({'__module__': '__main__',
                  'model': 'BMW',
                  'engine': 1.6,
                  '__dict__': <attribute '__dict__' of 'Car' objects>,
                  '__weakref__': <attribute '__weakref__' of 'Car' objects>,
                  '__doc__': None})
                  '''

    ''' Посмотрим атрибуты экземпляра класса 
    
    a1.__dict__ - команда аналогичная
    Out[6]: {} - выдаст пустоту
    
    '''

a1.seat = 4  # присвоим экземпляру атрибут.
             # Важно, что у других экземпляров этого класса он не появится, и у самого класса его не будет

a1.model = 'Lada' # изменим вручную у экземпляра атрибут, который он унаследовал от класса
a1.__dict__  # -- > {'model': 'Lada'} мы увидим, что он изменился, но атрибут класса не изменится

''' У класса существует пространство имен. Грубо говоря - пространство имен экземпляра локально, оно внутри глобального
    пространства имен класса. И при изменении атрибута экземпляра, Питон ищет сначала локально'''